use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use ark_std::marker::PhantomData;
use stark_rings::OverField;

use crate::{ark_base::*, utils::sumcheck};

/// Non-interactive proof generated by the linearization prover
///
/// # Members
///
/// * `linearization_sumcheck` - A list of non-interactive sumcheck prover messages.
/// * `v` - The MLE of `wit.f_hat` evaluated at the sumcheck challenge point.
/// * `u` - The MLEs of $\\{ M_j \mathbf{z} \mid j = 1, 2, \dots, t \\}$ evaluated at sumcheck challenge point.
#[derive(Clone, Debug, PartialEq, CanonicalSerialize, CanonicalDeserialize)]
pub struct LinearizationProof<NTT: OverField> {
    /// A list of non-interactive sumcheck prover messages.  
    ///
    /// Sent in step 2 of linearization subprotocol.  
    pub linearization_sumcheck: sumcheck::Proof<NTT>,
    /// The evaluations of MLE's of the rows of $\hat{\mathbf{f}}$-matrices of the witness at the sumcheck challenge point, i.e.
    ///
    /// $$
    /// \text{v[i]}= \text{mle}[\text{wit.f\\_hat[i]}] (\mathbf{r}).
    /// $$
    ///
    /// Sent in the step 3 of linearization subprotocol.
    pub v: Vec<NTT>,
    /// The evaluations of MLE's of $\\{ M_j \mathbf{z} \mid j = 1, 2, \dots, t \\}$ at evaluated at the sumcheck challenge point, i.e.
    ///
    /// $$
    /// \text{u[j]} =  \sum\_{\vec{\mathbf{b}} \in \\{0,1\\}^{\log n\_c}}
    /// \text{mle}[\text{ccs.M[j]}](\vec{\mathbf{x}}, \vec{\mathbf{b}}) \cdot \text{mle}\[\mathbf{z}\](\vec{\mathbf{b}}).
    /// $$
    ///
    /// Sent in the step 3 of linearization subprotocol.
    pub u: Vec<NTT>,
}

/// The LatticeFold prover
///
/// The implementation of the `LinearizationProver` trait is defined in the main linearization file.
pub struct LFLinearizationProver<NTT, T> {
    _ntt: PhantomData<NTT>,
    _t: PhantomData<T>,
}

/// The LatticeFold verifier
///
/// The implementation of the `LinearizationVerifier` trait is defined in the main linearization file.
pub struct LFLinearizationVerifier<NTT, T> {
    _ntt: PhantomData<NTT>,
    _t: PhantomData<T>,
}

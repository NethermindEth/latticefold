use std::{fs, path::Path};

fn main() -> Result<(), String> {
    generate_code_for_examples();

    Ok(())
}

fn generate_code_for_examples() {
    let out_dir = std::env::var("OUT_DIR").unwrap();

    let dest_path = Path::new(&out_dir).join("examples_generated.rs");

    let b = std::env::var("PARAM_B").unwrap_or("1 << 15".to_string());
    let l = std::env::var("PARAM_L").unwrap_or("5".to_string());
    let b_small = std::env::var("PARAM_B_SMALL").unwrap_or("2".to_string());
    let k = std::env::var("PARAM_K").unwrap_or("15".to_string());
    let c = std::env::var("PARAM_C").unwrap_or("4".to_string());
    let wit_len = std::env::var("PARAM_WIT_LEN").unwrap_or("4".to_string());
    let x_len = std::env::var("PARAM_X_LEN").unwrap_or("1".to_string());

    let x_len_stark = std::env::var("PARAM_X_LEN_STARK").unwrap_or("1".to_string());
    let c_stark = std::env::var("PARAM_C_STARK").unwrap_or("15".to_string());
    let b_stark = std::env::var("PARAM_B_STARK").unwrap_or("1073741824u128".to_string());
    let l_stark = std::env::var("PARAM_L_STARK").unwrap_or("9".to_string());
    let b_small_stark = std::env::var("PARAM_B_SMALL_STARK").unwrap_or("2".to_string());
    let wit_len_stark = std::env::var("PARAM_WIT_LEN_STARK").unwrap_or("30".to_string());
    let k_stark = std::env::var("PARAM_K_STARK").unwrap_or("30".to_string());

    let generated_code = format!(
        r#"
        #[allow(dead_code)]
        // This file was automatically generated by build.rs script.
        // It can be used in examples with include! macro:
        //     include!(concat!(env!("OUT_DIR"), "/examples_generated.rs"));
        //
        // Check examples/README.md file how to use environment variables to modify the file

        use latticefold::decomposition_parameters::DecompositionParams;

        #[derive(Clone)]
        pub struct GoldilocksExampleDP {{}}

        impl DecompositionParams for GoldilocksExampleDP {{
            const B: u128 = {b}; // Default: 1 << 15
            const L: usize = {l}; // Default: 5
            const B_SMALL: usize = {b_small}; // Default = 2
            const K: usize = {k}; // Default = 15
        }}

        #[derive(Clone)]
        pub struct StarkPrimeExampleDP {{}}

        impl DecompositionParams for StarkPrimeExampleDP {{
            const B: u128 = {b_stark}; // Default: 1073741824u128
            const L: usize = {l_stark}; // Default: 9
            const B_SMALL: usize = {b_small_stark}; // Default = 2
            const K: usize = {k_stark}; // Default = 30
        }}

        #[derive(Clone)]
        pub struct BabyBearExampleDP {{}}

        impl DecompositionParams for BabyBearExampleDP {{
            const B: u128 = {b}; // Default: 1 << 15
            const L: usize = {l}; // Default: 5
            const B_SMALL: usize = {b_small}; // Default = 2
            const K: usize = {k}; // Default = 15
        }}

        #[derive(Clone)]
        pub struct FrogExampleDP {{}}

        impl DecompositionParams for FrogExampleDP {{
            const B: u128 = {b}; // Default: 1 << 15
            const L: usize = {l}; // Default: 5
            const B_SMALL: usize = {b_small}; // Default = 2
            const K: usize = {k}; // Default = 15
        }}

        const X_LEN: usize = {x_len}; // Default = 1
        const C: usize = {c}; // Default = 4
        const WIT_LEN: usize = {wit_len}; // Default = 4

        const W_GOLDILOCKS: usize = WIT_LEN * GoldilocksExampleDP::L;
        const W_BABYBEAR: usize = WIT_LEN * BabyBearExampleDP::L;
        const W_FROG: usize = WIT_LEN * FrogExampleDP::L;

        const X_LEN_STARK: usize = {x_len_stark}; // Default = 1
        const C_STARK: usize = {c_stark}; // Default = 4
        const WIT_LEN_STARK: usize = {wit_len_stark}; // Default = 4

        const W_STARK: usize = WIT_LEN_STARK * StarkPrimeExampleDP::L;

        "#,
    );

    fs::write(&dest_path, generated_code).unwrap();

    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-env-changed=PARAM_B");
    println!("cargo:rerun-if-env-changed=PARAM_L");
    println!("cargo:rerun-if-env-changed=PARAM_B_SMALL");
    println!("cargo:rerun-if-env-changed=PARAM_K");
    println!("cargo:rerun-if-env-changed=PARAM_C");
    println!("cargo:rerun-if-env-changed=PARAM_WIT_LEN");
    println!("cargo:rerun-if-env-changed=PARAM_X_LEN");
    println!("cargo:rerun-if-env-changed=PARAM_X_LEN_STARK");
    println!("cargo:rerun-if-env-changed=PARAM_C_STARK");
    println!("cargo:rerun-if-env-changed=PARAM_B_STARK");
    println!("cargo:rerun-if-env-changed=PARAM_L_STARK");
    println!("cargo:rerun-if-env-changed=PARAM_B_SMALL_STARK");
    println!("cargo:rerun-if-env-changed=PARAM_WIT_LEN_STARK");
    println!("cargo:rerun-if-env-changed=PARAM_K_STARK");
}

use std::fs;
use std::path::Path;

fn main() -> Result<(), String> {
    let out_dir = std::env::var("OUT_DIR").unwrap();

    let dest_path = Path::new(&out_dir).join("generated.rs");

    let generated_code = format!(
        r#"
        // This file was automatically generated by build.rs script.
        // It can be used in examples with include! macro:
        //     include!(concat!(env!("OUT_DIR"), "/generated.rs"));
        //
        // Check examples/README.md file how to use environment variables to modify the file

        use latticefold::decomposition_parameters::DecompositionParams;

        #[derive(Clone)]
        pub struct ExampleDP {{}}

        impl DecompositionParams for ExampleDP {{
            const B: u128 = {}; // Default: 1 << 15
            const L: usize = {}; // Default: 5
            const B_SMALL: usize = {}; // Default = 2
            const K: usize = {}; // Default = 15
        }}

        const C: usize = {}; // Default = 4
        const WIT_LEN: usize = {}; // Default = 4
        const W: usize = WIT_LEN * ExampleDP::L;

        "#,
        std::env::var("PARAM_B").unwrap_or("1 << 15".to_string()),
        std::env::var("PARAM_L").unwrap_or("5".to_string()),
        std::env::var("PARAM_B_SMALL").unwrap_or("2".to_string()),
        std::env::var("PARAM_K").unwrap_or("15".to_string()),
        std::env::var("PARAM_C").unwrap_or("4".to_string()),
        std::env::var("PARAM_WIT_LEN").unwrap_or("4".to_string()),
    );

    fs::write(&dest_path, generated_code).unwrap();

    // Optionally tell Cargo when to rerun the build script
    println!("cargo:rerun-if-changed=build.rs");

    Ok(())
}
